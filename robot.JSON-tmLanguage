{
    "comment": "\n    Robot Framework syntax highlighting for .txt and .robot files.\n    ",
    "fileTypes": [
        "txt",
        "robot"
    ], 
    "keyEquivalent": "^~R", 
    "name": "Robot Framework .txt, .robot",
    "patterns": [
        {
            "comment": "start of a table", 
            "begin": "(?i)^\\*+\\s*(settings?|metadata|(user )?keywords?|test ?cases?|variables?)",
            "end": "$",
            "name": "string.robot.header"
        }, 
        {
            "begin": "(?i)^\\s*\\[?Documentation\\]?", 
            "end": "^(?!\\s*+\\.\\.\\.)",
            "name": "comment"
        }, 
        {
            "comment": "test-case settings",
            "match": "(?i)\\[(Arguments|Setup|Teardown|Precondition|Postcondition|Template|Return|Timeout)\\]", 
            "name": "storage.type.method.robot"
        }, 
        {
            "begin": "(?i)\\[Tags\\]", 
            "comment": "test tags", 
            "end": "^(?!\\s*+\\.\\.\\.)",
            "name": "storage.type.method.robot", 
            "patterns": [
                {
                    "match": "^\\s*\\.\\.\\.", 
                    "name": "comment"
                }
            ]
        }, 
        {
            "match": "\\b([0-9]*(\\.[0-9]+)?)\\b", 
            "name": "constant.numeric.robot"
        }, 
        {
            "comment": "${variables}. one backslash escapes the variable, two do not", 
            "begin": "((?<!\\\\)|(?<=\\\\\\\\))[$@%]\\{",
            "patterns": [
                { "include": "$self" },
                {  "name": "entity.name.class",
                    "match": "."
                }
            ],
            "end": "\\}",
            "name": "entity.name.class"
        }, 
        {
            "begin": "(^| {2,}|\t|\\| {1,})(?<!\\\\)#", 
            "end": "$", 
            "name": "comment.robot"
        }, 
        {
            "begin": "(^[^ \\t\\*\\n\\|]+)|((?<=^\\|)\\s+[^ \\t\\*\\n\\|]+)", 
            "end": "(?=\\s{2})|\\t|$|\\s+(?=\\|)",
            "name": "keyword.control.robot"
        }, 
        {
            "match": "(?i)^\\s*(Given|And|Then|When)", 
            "name": "keyword.control.robot"
        }
    ], 
    "scopeName": "text.robot", 
    "uuid": "8a94694a-e593-4f5f-8ed3-047177e5b1b5"
}
